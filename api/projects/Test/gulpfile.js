var gulp = require('gulp'),
compass = require('gulp-compass'),
autoprefixer = require('gulp-autoprefixer'),
minifycss = require('gulp-clean-css'),
uglify = require('gulp-uglify'),
rename = require('gulp-rename'),
concat = require('gulp-concat'),
notify = require('gulp-notify'),
plumber = require('gulp-plumber'),
path = require('path'),
ngAnnotate = require('gulp-ng-annotate'),
embedTemplates = require('gulp-angular-embed-templates'),
fs = require('fs'),
q = require('q'),
pkg = require('./package.json'),
sourcemaps = require('gulp-sourcemaps'),
jshint = require('gulp-jshint'),
browserSync = require('browser-sync').create(),
appName = pkg.name;

var notifyInfo = {
	title: 'Gulp',
	icon: path.join(__dirname, 'gulp.png')
};

var plumberErrorHandler = {
	errorHandler: notify.onError({
		title: notifyInfo.title,
		icon: notifyInfo.icon,
		message: "Error: <%= error.message %>"
	})
};




/*
* Update to use the files/directotries you want to watch and minify
*/

var stylesToDo = [
	'modules/style/*.scss',
];

var htmlToDoModules = [
	'modules/html/*.html'
];

var module_scripts = [
	'modules/script/*.js'
];

var stylesToDoApp = [
	'app/style/*.scss',
];

var app_scripts = [
	'app/script/*.js'
];

var htmlToDoApp = [
	'app/html/*.html'
];

var stylesToDoVender = [
	//'bower_components/font-awesome/css/font-awesome.min.css'
];

var vendor_scripts = [
	'bower_components/angular/angular.min.js',
	'bower_components/angular-resource/angular-resource.js',
	'bower_components/angular-sanitize/angular-sanitize.js',
	'bower_components/angular-route/angular-route.js',
	'bower_components/angular-loader/angular-loader.js',
	'bower_components/angular-animate/angular-animate.min.js',
	// 'bower_components/ckc-angularjs-utility/dist/utility.min.js',
	// 'bower_components/ngstorage/ngStorage.min.js',
];






/* INSTALL
* Creates index.html
* Creates bower.json
*/

gulp.task('install', ['index', 'bower']);







/* INDEX
* Creates index.html
*/

gulp.task('index', function() {
	var d = q.defer();

	var html = '<!doctype html>' + "\r" +
	'<html ng-app="app">' + "\r" +
	'<head>' + "\r" +
	"\t" + '<meta charset="utf-8">' + "\r" +
	"\t" + '<meta http-equiv="X-UA-Compatible" content="IE=edge">' + "\r" +
	"\t" + '<meta name="description" content="">' + "\r" +
	"\t" + '<meta name="viewport" content="width=device-width">' + "\r" +
	"\t" + '<link rel="icon" type="image/png" href="./favicon.png">' + "\r" +
	"\t" + '<link rel="stylesheet" href="/dist/css/' + appName + '_vendor.min.css">' + "\r" +
	"\t" + '<link rel="stylesheet" href="/dist/css/' + appName + '_app.min.css">' + "\r" +
	"\t" + '<link rel="stylesheet" href="/dist/css/' + appName + '.min.css">' + "\r" +
	"\t" + '<base href="/" />' + "\r" +
	'</head>' + "\r" +
	'<body ng-controller="AppCtlr as app">' + "\r" +
	"\t" + '<navigation></navigation>' + "\r" +
	"\t" + '<div ng-view=""></div>' + "\r" +
	"\t" + '<script src="/dist/js/' + appName + '_vendor.min.js"></script>' + "\r" +
	"\t" + '<script src="/dist/js/' + appName + '_app.min.js"></script>' + "\r" +
	"\t" + '<script src="/dist/js/' + appName + '.min.js"></script>' + "\r" +
	'</body>' + "\r" +
	'</html>';

	fs.writeFile('./index.html', html, function() {
		d.resolve(true);
	});

	return d.promise;
});









/* BOWER
* Creates bower.json
*/

gulp.task('bower', function() {
	var d = q.defer();
	var bowerJson = {
		_comment: 'THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT EDIT.',
		name: pkg.name,
		version: pkg.version,
		description: pkg.description,
		ignore: [
			".DS_Store",
			".git",
			".gitignore",
			"node_modules",
			"bower_components",
			".sass-cache",
			"npm-debug.log"
		],
		dependencies: pkg.bower
	};

	bowerJson = JSON.stringify(bowerJson, null, '\t')

	fs.writeFile('./bower.json', bowerJson, function() {
		d.resolve(true);
	});

	return d.promise;
});


gulp.task('signaldone', function() {
	return console.log('PROCESS COMPLETED');
});





/* BROWSER SYNC
* Starts bower server
*/

gulp.task('browser-sync', function() {
	var url = require("url");
	var defaultFile = "index.html"

	browserSync.init({
		open: false,
		port: 5555,
		server: {
			baseDir: "./",
			middleware: function(req, res, next) {
				var fileName = url.parse(req.url);
				fileName = fileName.href.split(fileName.search).join("");
				fileName = fileName.split('');
				fileName.shift();
				fileName = fileName.join('');
				fileName = path.resolve(__dirname, fileName);

				var fileExists;

				try{
					fileExists = fs.statSync(fileName);
				}catch(e){
					fileExists = false
				}

				if (!fileExists && fileName.indexOf("browser-sync-client") < 0) {
					req.url = "/" + defaultFile;
				}
				return next();
			}
		}
	});
});






/* STYLES
* Minifies/compiles sass
*/

gulp.task('module_styles', function() {
	return gulp.src(stylesToDo)
	.pipe(plumber(plumberErrorHandler))
	.pipe(gulp.dest('dist/css/build/sass'))
	.pipe(compass({
		css: 'dist/css/build/css',
		sass: 'dist/css/build/sass',
		image: 'app/css/images'
	}))
	.pipe(autoprefixer('last 2 version', 'Safari', 'ie', 'opera', 'ios', 'android', 'chrome', 'firefox'))
	.pipe(concat(appName + '.css'))
	.pipe(rename({
		suffix: '.min'
	}))
	.pipe(minifycss())
	.pipe(gulp.dest('dist/css'));
});


/* STYLES APP
* Minifies/compiles sass
*/

gulp.task('app_styles', function() {
	return gulp.src(stylesToDoApp)
	.pipe(plumber(plumberErrorHandler))
	.pipe(gulp.dest('dist/css/build/sass'))
	.pipe(compass({
		css: 'dist/css/build/css',
		sass: 'dist/css/build/sass',
		image: 'app/css/images'
	}))
	.pipe(autoprefixer('last 2 version', 'Safari', 'ie', 'opera', 'ios', 'android', 'chrome', 'firefox'))
	.pipe(concat(appName + '_app.css'))
	.pipe(rename({
		suffix: '.min'
	}))
	.pipe(minifycss())
	.pipe(gulp.dest('dist/css'));
});

/* STYLES VENDOR
* Minifies/compiles sass from bower components
*/

gulp.task('vendor_styles', function() {
	return gulp.src(stylesToDoVender)
	.pipe(plumber(plumberErrorHandler))
	.pipe(concat(appName + '_vendor.css'))
	.pipe(rename({
		suffix: '.min'
	}))
	.pipe(minifycss())
	.pipe(gulp.dest('dist/css'));
});




var moveFonts = [
	'bower_components/font-awesome/fonts/*.*'
];


gulp.task('move_fonts', function(done) {
	return gulp.src(moveFonts).pipe(gulp.dest('dist/fonts/'));
});







/* SCRIPTS VENDOR
* Minifies bower components js files
*/


gulp.task('vendor_scripts', function() {
	return gulp.src(vendor_scripts)
	.pipe(plumber(plumberErrorHandler))
	.pipe(concat(appName + '_vendor.min.js'))
	.pipe(gulp.dest('dist/js'))
});

/* SCRIPTS
* Minifies js files
*/

gulp.task('app_scripts', function() {
	return gulp.src(app_scripts)
	.pipe(plumber(plumberErrorHandler))
	.pipe(sourcemaps.init())
	.pipe(ngAnnotate({
		// true helps add where @ngInject is not used. It infers.
		// Doesn't work with resolve, so we must be explicit there
		add: true
	}))
	.pipe(embedTemplates())
	.pipe(jshint())
	.pipe(jshint.reporter('default'))
	.pipe(concat(appName + '_app.min.js'))
	.pipe(gulp.dest('dist/js'))
	.pipe(uglify())
	.pipe(sourcemaps.write('./'))
	.pipe(gulp.dest('dist/js'))
});

/* SCRIPTS
* Minifies js files
*/

gulp.task('module_scripts', function() {
	return gulp.src(app_scripts)
	.pipe(plumber(plumberErrorHandler))
	.pipe(sourcemaps.init())
	.pipe(ngAnnotate({
		// true helps add where @ngInject is not used. It infers.
		// Doesn't work with resolve, so we must be explicit there
		add: true
	}))
	.pipe(embedTemplates())
	.pipe(jshint())
	.pipe(jshint.reporter('default'))
	.pipe(concat(appName + '.min.js'))
	.pipe(gulp.dest('dist/js'))
	.pipe(uglify())
	.pipe(sourcemaps.write('./'))
	.pipe(gulp.dest('dist/js'))
});








var moveSourceMaps = [
	'bower_components/angular/angular.min.js.map',
	'bower_components/angular-animate/angular-animate.min.js.map',
	//'bower_components/ckc-angularjs-utility/dist/utility.min.js.map'
];


gulp.task('move_source_maps', function(done) {
	return gulp.src(moveSourceMaps).pipe(gulp.dest('dist/js'));
});
















gulp.task('default', [
	'move_source_maps',
	'move_fonts',
	'module_styles',
	'app_styles',
	'vendor_styles',
	'vendor_scripts',
	'module_scripts',
	'app_scripts',
	// 'browser-sync'
], function(){});
